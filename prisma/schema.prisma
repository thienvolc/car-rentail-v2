generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model car {
  id                   Int                   @id @default(autoincrement())
  owner_id             Int
  location_id          Int
  license_plate_number String                @unique(map: "license_plate_number") @db.VarChar(20)
  year_of_manufacture  Int                   @db.Year
  brand                String                @db.VarChar(50)
  model                String                @db.VarChar(50)
  number_of_seats      Int
  fuel_type            car_fuel_type
  transmission_type    car_transmission_type
  fuel_consumption     Decimal?              @db.Decimal(4, 2)
  base_price_per_day   Decimal               @db.Decimal(10, 2)
  description          String?               @db.Text
  approval_status      car_approval_status?  @default(pending)
  status               car_status?           @default(active)
  created_at           DateTime?             @default(now()) @db.Timestamp(0)
  updated_at           DateTime?             @default(now()) @db.Timestamp(0)
  user                 user                  @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "car_ibfk_1")
  car_location         car_location          @relation(fields: [location_id], references: [id], onUpdate: NoAction, map: "car_ibfk_2")
  car_certificate      car_certificate[]
  car_image            car_image[]
  trip                 trip[]

  @@index([approval_status], map: "idx_car_approval_status")
  @@index([location_id], map: "idx_car_location")
  @@index([owner_id], map: "idx_car_owner")
  @@index([status], map: "idx_car_status")
}

model car_certificate {
  id               Int       @id @default(autoincrement())
  car_id           Int
  registration_url String?   @db.VarChar(500)
  inspection_url   String?   @db.VarChar(500)
  insurance_url    String?   @db.VarChar(500)
  front_image_url  String?   @db.VarChar(500)
  left_image_url   String?   @db.VarChar(500)
  right_image_url  String?   @db.VarChar(500)
  back_image_url   String?   @db.VarChar(500)
  created_at       DateTime? @default(now()) @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @db.Timestamp(0)
  car              car       @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "car_certificate_ibfk_1")

  @@index([car_id], map: "car_id")
}

model car_image {
  id          Int       @id @default(autoincrement())
  car_id      Int
  image_order Int       @default(1)
  image_url   String    @db.VarChar(500)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  car         car       @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "car_image_ibfk_1")

  @@index([car_id], map: "car_id")
}

model car_location {
  id              Int       @id @default(autoincrement())
  user_id         Int
  province        String    @db.VarChar(100)
  district        String    @db.VarChar(100)
  ward            String    @db.VarChar(100)
  address_details String?   @db.Text
  latitude        Decimal?  @db.Decimal(10, 8)
  longitude       Decimal?  @db.Decimal(11, 8)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  car             car[]
  user            user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "car_location_ibfk_1")

  @@index([user_id], map: "user_id")
}

model driving_license {
  id                                             Int                     @id @default(autoincrement())
  user_id                                        Int
  verified_by_user_id                            Int?
  verified_at                                    DateTime?               @db.Timestamp(0)
  license_number                                 String                  @db.VarChar(20)
  full_name_on_license                           String                  @db.VarChar(100)
  status                                         driving_license_status? @default(pending)
  license_front_image_url                        String?                 @db.VarChar(500)
  license_back_image_url                         String?                 @db.VarChar(500)
  created_at                                     DateTime?               @default(now()) @db.Timestamp(0)
  updated_at                                     DateTime?               @default(now()) @db.Timestamp(0)
  user_driving_license_user_idTouser             user                    @relation("driving_license_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "driving_license_ibfk_1")
  user_driving_license_verified_by_user_idTouser user?                   @relation("driving_license_verified_by_user_idTouser", fields: [verified_by_user_id], references: [id], onUpdate: NoAction, map: "driving_license_ibfk_2")

  @@index([user_id], map: "user_id")
  @@index([verified_by_user_id], map: "verified_by_user_id")
}

model otp_request {
  id           Int                      @id @default(autoincrement())
  code         String                   @db.VarChar(10)
  email        String                   @db.VarChar(100)
  request_type otp_request_request_type
  status       otp_request_status?      @default(pending)
  created_at   DateTime?                @default(now()) @db.Timestamp(0)
  expired_at   DateTime                 @db.Timestamp(0)

  @@index([code], map: "idx_otp_code")
  @@index([email], map: "idx_otp_email")
}

model role {
  id          Int         @id @default(autoincrement())
  name        String      @unique(map: "name") @db.VarChar(50)
  description String?     @db.Text
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  user_role   user_role[]
}

model trip {
  id                Int                 @id @default(autoincrement())
  trip_code         String              @unique(map: "trip_code") @db.VarChar(20)
  car_id            Int
  renter_id         Int
  pickup_date       DateTime            @db.DateTime(0)
  return_date       DateTime            @db.DateTime(0)
  total_amount      Decimal             @db.Decimal(12, 2)
  status            trip_status?        @default(pending)
  approval_time     DateTime?           @db.Timestamp(0)
  created_at        DateTime?           @default(now()) @db.Timestamp(0)
  updated_at        DateTime?           @default(now()) @db.Timestamp(0)
  car               car                 @relation(fields: [car_id], references: [id], onUpdate: NoAction, map: "trip_ibfk_1")
  user              user                @relation(fields: [renter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "trip_ibfk_2")
  trip_cancellation trip_cancellation[]

  @@index([car_id], map: "idx_trip_car")
  @@index([pickup_date, return_date], map: "idx_trip_dates")
  @@index([renter_id], map: "idx_trip_renter")
  @@index([status], map: "idx_trip_status")
}

model trip_cancellation {
  id                   Int       @id @default(autoincrement())
  trip_id              Int
  cancelled_by_user_id Int
  cancelled_at         DateTime? @default(now()) @db.Timestamp(0)
  created_at           DateTime? @default(now()) @db.Timestamp(0)
  trip                 trip      @relation(fields: [trip_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "trip_cancellation_ibfk_1")
  user                 user      @relation(fields: [cancelled_by_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "trip_cancellation_ibfk_2")

  @@index([cancelled_by_user_id], map: "cancelled_by_user_id")
  @@index([trip_id], map: "trip_id")
}

model user {
  id                                                                Int                   @id @default(autoincrement())
  username                                                          String                @unique(map: "username") @db.VarChar(50)
  email                                                             String                @unique(map: "email") @db.VarChar(100)
  password                                                          String                @db.VarChar(255)
  phone_number                                                      String?               @db.VarChar(20)
  date_of_birth                                                     DateTime?             @db.Date
  gender                                                            user_gender?
  avatar_url                                                        String?               @db.VarChar(500)
  status                                                            user_status?          @default(active)
  created_at                                                        DateTime?             @default(now()) @db.Timestamp(0)
  updated_at                                                        DateTime?             @default(now()) @db.Timestamp(0)
  car                                                               car[]
  car_location                                                      car_location[]
  driving_license_driving_license_user_idTouser                     driving_license[]     @relation("driving_license_user_idTouser")
  driving_license_driving_license_verified_by_user_idTouser         driving_license[]     @relation("driving_license_verified_by_user_idTouser")
  trip                                                              trip[]
  trip_cancellation                                                 trip_cancellation[]
  user_identification_user_identification_user_idTouser             user_identification[] @relation("user_identification_user_idTouser")
  user_identification_user_identification_verified_by_user_idTouser user_identification[] @relation("user_identification_verified_by_user_idTouser")
  user_role                                                         user_role[]
  user_session                                                      user_session[]

  @@index([email], map: "idx_user_email")
  @@index([status], map: "idx_user_status")
  @@index([username], map: "idx_user_username")
}

model user_identification {
  id                                                 Int                         @id @default(autoincrement())
  user_id                                            Int
  verified_by_user_id                                Int?
  verified_at                                        DateTime?                   @db.Timestamp(0)
  full_name                                          String                      @db.VarChar(100)
  phone_number                                       String                      @db.VarChar(20)
  email                                              String                      @db.VarChar(100)
  national_id_number                                 String                      @db.VarChar(20)
  national_id_front_image_url                        String?                     @db.VarChar(500)
  selfie_with_national_id_image_url                  String?                     @db.VarChar(500)
  status                                             user_identification_status? @default(pending)
  created_at                                         DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at                                         DateTime?                   @default(now()) @db.Timestamp(0)
  user_user_identification_user_idTouser             user                        @relation("user_identification_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_identification_ibfk_1")
  user_user_identification_verified_by_user_idTouser user?                       @relation("user_identification_verified_by_user_idTouser", fields: [verified_by_user_id], references: [id], onUpdate: NoAction, map: "user_identification_ibfk_2")

  @@index([user_id], map: "user_id")
  @@index([verified_by_user_id], map: "verified_by_user_id")
}

model user_role {
  id         Int       @id @default(autoincrement())
  user_id    Int
  role_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_ibfk_1")
  role       role      @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_ibfk_2")

  @@unique([user_id, role_id], map: "unique_user_role")
  @@index([role_id], map: "role_id")
}

model user_session {
  id               Int       @id @default(autoincrement())
  user_id          Int
  refresh_token_id String    @db.VarChar(255)
  device_info      String?   @db.Text
  ip_address       String?   @db.VarChar(45)
  user_agent       String?   @db.Text
  login_time       DateTime? @default(now()) @db.Timestamp(0)
  expired_at       DateTime  @db.Timestamp(0)
  created_at       DateTime? @default(now()) @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @db.Timestamp(0)
  user             user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_session_ibfk_1")

  @@index([refresh_token_id], map: "idx_session_token")
  @@index([user_id], map: "idx_session_user")
}

enum otp_request_request_type {
  registration
  forgot_password
  host_registration
}

enum otp_request_status {
  pending
  verified
  failed
  expired
  cancelled
}

enum driving_license_status {
  pending
  verified
  rejected
}

enum user_gender {
  male
  female
  other
}

enum trip_status {
  pending
  approved
  rejected
  in_progress
  completed
  cancelled
}

enum car_fuel_type {
  gasoline
  diesel
  electric
  hybrid
}

enum user_status {
  active
  inactive
  banned
}

enum car_transmission_type {
  manual
  automatic
}

enum user_identification_status {
  pending
  verified
  rejected
}

enum car_approval_status {
  pending
  approved
  rejected
}

enum car_status {
  active
  rented
  inactive
  banned
}
